#!/bin/bash
#
# c.5
# Created by Hexapetalous on Jan 12, 2016.
#
# This is a part of C0005, Hexapetalous' file manager.
# This shell script tries to do something.
#
# Copyright (c) 2016 Hexapetalous. All rights reserved.
# This code is licensed under MIT License.
#
VERSION='0'
FILE_DIR='/home/wan/.C0005/'
FILE_NAME=$FILE_DIR'save'

show_help_and_exit()
{
    cat << HELP
This is c.5 version $VERSION.

Usage: c.5 [COMMAND] [OPTION_VALUE]
c.5 manages the info of files, and allows you to add something to dataset.

The followings are correct commands:
    add                Create a new known-type objects.
    backup             Backup the dataset.
    edit id            Edit the info of object.
    help               Show this help.
    restore            Restore the dataset.
    search [pattern]   Search a object by info.
    show [less]        Show all the existed objects. If there are too many 
                       objects, use "less" value to show it in less(1).
    version            Show version.

Here are known types:
    Code Document Game Music Project

Copyright (c) 2016 Hexapetalous. All rights reserved.
HELP
    exit 0
}

show_version_and_exit()
{
    echo "c.5 version $VERSION"
    echo 'This program is licensed under MIT License.'
    exit 0
}

### SHOW & EDIT & SEARCH SHARED PART ###########################################
# $1: Line
show_line()
{
    echo $1 |
        awk -F '%' '{printf("%4s %5s %10s %16s    %s\n", $1, $2, $3, $4, $5)}'
}

show_head()
{
    printf 'ID   NAME  %10s %16s    INFOMATION\n' TYPE 'CREATE DATE'    
}

### SHOW PART ##################################################################
show_file()
{
    show_head
    while read line;
    do
        show_line "$line"
    done < "$FILE_NAME"
}

### ADD & EDIT SHARED PART #####################################################
ask_for_type()
{
    local $asked_type
    export PS3='Choose the type of it: '
    select asked_type in Project Code Game Music Document;
    do
        break
    done
    echo $asked_type
}

set_prefix()
{
    local prefix
    # Maybe someday prefixes will conflict, so set them manually.
    case $1 in
        Project ) prefix='P';;
        Code    ) prefix='C';;
        Document) prefix='D';;
        Game    ) prefix='G';;
        Music   ) prefix='M';;
    esac
    echo $prefix
}

# $1 ID $2 Type $3 Date $4 Info
create_a_record()
{
    echo $1'%'$(set_prefix $2)$1'%'$2'%'$3'%'$4
}

# $1: Raw ID
turn_raw_id_to_num()
{
    local raw=$1
    [[ $raw != '0000' ]] || {
        echo 0
        return
    }
    while [[ $(echo $raw | cut --characters=1) == '0' ]]; do
        raw=$(echo $raw | cut --characters=2-)
    done
    echo $raw
}

### ADD PART ###################################################################
get_max_existed_id()
{
    [[ -f $FILE_NAME ]] || {
        echo -1
        return
    }
    local raw_max=$(cut --characters=1-4 "$FILE_NAME" | tail --lines=1)
    echo $(turn_raw_id_to_num $raw_max)
}

# $1: ID $2: Type $3: Info
add_record_to_file()
{
    [[ -f $FILE_NAME ]] || {
    	mkdir -p $FILE_DIR
    	touch $FILE_NAME
    }
    echo $(create_a_record $1 $2 "$(date '+%b %d, %Y')" "$3") >> "$FILE_NAME"
}

### EDIT PART ##################################################################
# $1: ID $2: Type $3: Date $4: Info
# Type, date and info are old ones and may be changed.
real_modify_file()
{
    local new_type=$2
    read -p 'Change type?(y or other): ' var1
    [[ $var1 == y ]] && {
        new_type=$(ask_for_type)
    }
    local new_time=$3
    read -p 'Change time to now?(y or other): ' var2
    [[ $var2 == y ]] && new_time=$(date '+%b %d, %Y')
    local new_info=$4
    read -p 'Change info?(y or other): ' var3
    [[ $var3 == y ]] && { 
        read -p 'Write it down: ' new_info2
        new_info=$new_info2
    }
    local modified_line=$(create_a_record $1 $new_type "$new_time" "$new_info")
    sed -i "$(($(turn_raw_id_to_num $1) + 1))c\\$modified_line" "$FILE_NAME"
}

# $1: Line
show_old()
{
    show_head
    show_line "$1"
}

# $1: ID
modify_file()
{
    [[ -f "$FILE_NAME" ]] || {
        echo 'c.5: ERROR - Did not find data file.'
        exit 1
    }
    while read line; 
    do
        [[ $(echo $line | cut --characters=1-4) == $(printf "%04d" $1) ]] && {
            break
        }
    done < "$FILE_NAME"
    [[ -z $line ]] && {
        echo 'c.5: ERROR - No found of ID:' $1
        exit 1
    }
    show_old "$line"
    local data date info
    data=($(echo $line | awk -F '%' '{printf("%s %s %s %s", $1, $3, $4, $5)}'))
    date="${data[2]} ${data[3]} ${data[4]}"
    info=${data[@]:5}
    real_modify_file ${data[0]} ${data[1]} "$date" "$info"
    return
}

### SEARCH PART ################################################################
# $1: parttern
search_and_print()
{
    show_head
    show_file | tail -n +2 | grep --color=auto "$1"
}

### MAIN PROGRAM ###############################################################
[[ -z "$1" ]] && show_help_and_exit
case $1 in
    help )
        show_help_and_exit;;
    version )
        show_version_and_exit;;
    add )
        max_existed_id=$(get_max_existed_id)
        asked_type=$(ask_for_type)
        read -p 'Write something about it: ' info
        current_id=$(($max_existed_id + 1))
        # There are too many IDs already.
        [[ $(($current_id > 9999)) -gt 0 ]] && {
            echo 'c.5: ERROR - Id is too large.'
            exit 1
        }
        current_id=$(printf "%04d" $current_id)
        # It should be thinking when adding a object.
        read -p 'ARE YOU SURE?(Yes for sure, other for quit) ' yes
        [[ $yes == Yes ]] || exit 0
        add_record_to_file $current_id $asked_type "$info"
        echo "The new object will be named as \"$(set_prefix $asked_type)$current_id\"."
        echo 'Program finished successfully.'
        exit 0;;
    show )
        [[ $2 == 'less' ]] && {
            show_file | less
            exit 0
        }
        [[ -z $2 ]] && {
            show_file
            exit 0
        }
        echo "Unknown value: $2."
        echo 'Try "c.5 help" for more info.'
        exit 1;;
    edit )
        shift 1
        [[ -z $1 ]] && {
            echo 'Need a value.'
            echo 'Try "c.5 help" for more info.'
            exit 1
        }
        for params in $*;
        do
            modify_file $params
        done
        echo 'Program finished correctly.'
        exit 0;;
    search )
        search_and_print "$2"
        exit 0;;
    * )
        echo "Unknown command: $1"
        echo 'Try "c.5 help" for more info.'
        exit 1;;
esac
